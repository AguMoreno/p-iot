[{"id":"f6f2187d.f17ca8","type":"tab","label":"PublicityControl","disabled":false,"info":""},{"id":"6bb5342f.84ad1c","type":"tab","label":"VirtualRemoteControlFromMqtt","disabled":false,"info":""},{"id":"993456db.6e41d8","type":"tab","label":"ScoringBoard","disabled":false,"info":""},{"id":"e1ffd6f4.380a08","type":"group","z":"993456db.6e41d8","name":"Placard","style":{"fill":"#bfdbef","label":true,"stroke":"#3f3f3f","color":"#3f3f3f"},"nodes":["7cb91e30.8eac5","27f12061.5242a","4626feaa.826a8"],"x":854,"y":-1,"w":212,"h":162},{"id":"240afd9c.4f5402","type":"group","z":"993456db.6e41d8","name":"Actions Groups","style":{"stroke":"#3f3f3f","fill":"#bfbfbf","label":true,"color":"#3f3f3f"},"nodes":["8e1b9975.402078","90c5e874.c67b88","435d4ab3.5afc44","108919a2.d39446"],"x":34,"y":99,"w":172,"h":202},{"id":"bb621a1d.5999e8","type":"group","z":"993456db.6e41d8","name":"Debuggin","style":{"fill":"#bfdbef","label":true,"color":"#3f3f3f","stroke":"#3f3f3f"},"nodes":["9d560ee4.3aa9d","a2ce370a.519358"],"x":854,"y":179,"w":212,"h":122},{"id":"b8412b29.cdef88","type":"group","z":"993456db.6e41d8","name":"History","style":{"stroke":"#3f3f3f","fill":"#bfdbef","label":true},"nodes":["1f8e04bf.46e6cb","d2336101.e9f18"],"x":854,"y":319,"w":192,"h":122},{"id":"3102bca2.1ad974","type":"group","z":"6bb5342f.84ad1c","name":"VirtualControl","style":{"stroke":"#3f3f3f","fill":"#bfbfbf","label":true,"color":"#3f3f3f"},"nodes":["7b164d8f.fa2774","a24723d1.05a8b","f747785c.35ad88","d0d41f0b.d8085"],"x":374,"y":259,"w":172,"h":202},{"id":"5054cf9e.d52d3","type":"ui_tab","name":"trash","icon":"dashboard","disabled":true,"hidden":false},{"id":"7fa84a97.ca4684","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey","palette":"light"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"bfa50861.979ed8","type":"ui_group","name":"Placard","tab":"d8438916.f29758","order":1,"disp":true,"width":"10","collapse":false,"className":""},{"id":"60bf50f8.caf5b","type":"ui_tab","name":"DEBUG","icon":"dashboard","disabled":false,"hidden":false},{"id":"aaed0f5e.dc6bb","type":"ui_group","name":"Score","tab":"3bef3863.9b8c58","order":1,"disp":true,"width":"20","collapse":false,"className":""},{"id":"d8438916.f29758","type":"ui_tab","name":"Placard","icon":"dashboard","disabled":false,"hidden":false},{"id":"3bef3863.9b8c58","type":"ui_tab","name":"Debuggin","icon":"dashboard","disabled":false,"hidden":false},{"id":"c9ee75b6.5e7c18","type":"ui_group","name":"TrashGroup","tab":"5054cf9e.d52d3","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"5f68bb21.60d2c4","type":"gauth","name":"node-red-cbpadel@cbpadel.iam.gserviceaccount.com"},{"id":"cc493947.110338","type":"ui_tab","name":"History_tab","icon":"dashboard","disabled":false,"hidden":false},{"id":"fc86343b.be03e8","type":"ui_group","name":"History","tab":"cc493947.110338","order":1,"disp":true,"width":"14","collapse":false,"className":"history_class"},{"id":"497dab45.319884","type":"mqtt-broker","name":"","broker":"broker.emqx.io","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"3871b005.febd6","type":"ui_tab","name":"ESP","icon":"dashboard","disabled":false,"hidden":false},{"id":"403ac05f.4044","type":"ui_group","name":"ESP","tab":"3871b005.febd6","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"333cb59c.6ddb5a","type":"inject","z":"f6f2187d.f17ca8","name":"B","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"teamB","payload":"{\"action\": \"B\"}","payloadType":"json","x":210,"y":1340,"wires":[["dd97dcf1.f7dd9","3de00361.9a59bc"]]},{"id":"9641814f.1368a","type":"inject","z":"f6f2187d.f17ca8","name":"Undo","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"undo","payload":"{\"action\": \"Undo\"}","payloadType":"json","x":210,"y":1380,"wires":[["dd97dcf1.f7dd9","3de00361.9a59bc"]]},{"id":"dd97dcf1.f7dd9","type":"debug","z":"f6f2187d.f17ca8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":410,"y":1200,"wires":[]},{"id":"6c8349b.35d1bb8","type":"inject","z":"f6f2187d.f17ca8","name":"Reset","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"reset","payload":"{\"action\": \"Reset\"}","payloadType":"json","x":210,"y":1260,"wires":[["dd97dcf1.f7dd9","3de00361.9a59bc"]]},{"id":"e0630476.98a058","type":"inject","z":"f6f2187d.f17ca8","name":"A","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"teamA","payload":"{\"action\": \"A\"}","payloadType":"json","x":210,"y":1300,"wires":[["dd97dcf1.f7dd9","3de00361.9a59bc"]]},{"id":"c5d1202d.b7fca","type":"debug","z":"f6f2187d.f17ca8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":930,"y":1340,"wires":[]},{"id":"86f9c13b.08936","type":"debug","z":"f6f2187d.f17ca8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":650,"y":1200,"wires":[]},{"id":"f6bc9ce.20d1b6","type":"debug","z":"f6f2187d.f17ca8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":650,"y":1300,"wires":[]},{"id":"e64e7a48.ea8e68","type":"function","z":"f6f2187d.f17ca8","name":"","func":"// Estado inicial de los puntajes\nlet currentGame = flow.get('currentGame') || { teamA: 0, teamB: 0, history: [] };\n\nswitch (msg.payload.action) {\n    case \"A\":\n        // Guardar el estado actual en el historial antes de cambiarlo\n        currentGame.history.push({ teamA: currentGame.teamA, teamB: currentGame.teamB });\n        currentGame.teamA += 1;\n        break;\n    case \"B\":\n        // Guardar el estado actual en el historial antes de cambiarlo\n        currentGame.history.push({ teamA: currentGame.teamA, teamB: currentGame.teamB });\n        currentGame.teamB += 1;\n        break;\n    case \"Undo\":\n        if (currentGame.history.length > 0) {\n            // Recuperar el último estado del historial\n            let previousState = currentGame.history.pop();\n            currentGame.teamA = previousState.teamA;\n            currentGame.teamB = previousState.teamB;\n        }\n        break;\n    case \"Reset\":\n        // Guardar el estado actual en el historial antes de resetearlo\n        currentGame.history.push({ teamA: currentGame.teamA, teamB: currentGame.teamB });\n        currentGame.teamA = 0;\n        currentGame.teamB = 0;\n        currentGame.history = [];\n        break;\n    default:\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n}\n\nflow.set('currentGame', currentGame); // Guardar el estado actualizado en el contexto de flujo\n\nmsg.payload = { teamA: currentGame.teamA, teamB: currentGame.teamB }; // Actualizar el payload con el estado actual\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":460,"y":1300,"wires":[["f6bc9ce.20d1b6"]]},{"id":"55966e52.0fa95","type":"function","z":"f6f2187d.f17ca8","name":"Points Logic","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":690,"y":1480,"wires":[["c5d1202d.b7fca"]]},{"id":"3de00361.9a59bc","type":"function","z":"f6f2187d.f17ca8","name":"Actions Logic","func":"// Obtener el objeto 'court' del contexto de flujo\nlet court = flow.get('court') || {matchs: {currentGame: {pointsA: 0, pointsB: 0}, history: [], sets: []}};\n\n// Evaluar la acción proveniente del nodo inject\nswitch (msg.payload.action) {\n    case \"A\":\n        // Sumar punto al Equipo A\n        court.matchs.currentGame.pointsA += 1;\n        court.matchs.history.push({action: \"pointA\"});\n        break;\n    case \"B\":\n        // Sumar punto al Equipo B\n        court.matchs.currentGame.pointsB += 1;\n        court.matchs.history.push({action: \"pointB\"});\n        break;\n    case \"Undo\":\n        // Deshacer la última acción\n        let lastAction = court.matchs.history.pop();\n        if (lastAction) {\n            switch (lastAction.action) {\n                case \"pointA\":\n                    court.matchs.currentGame.pointsA -= 1;\n                    break;\n                case \"pointB\":\n                    court.matchs.currentGame.pointsB -= 1;\n                    break;\n                // Agregar más casos si hay otras acciones que deshacer\n            }\n        }\n        break;\n    case \"Reset\":\n        // Reiniciar el partido\n        court.matchs.sets = [];\n        court.matchs.currentGame = {pointsA: 0, pointsB: 0};\n        court.matchs.history = [];\n        break;\n    default:\n        // Por si se recibe una acción no esperada\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n        break;\n}\n\n// Guardar el estado actualizado\nflow.set('court', court);\n\n// Pasar el estado actualizado al siguiente nodo (si es necesario)\nreturn {payload: court};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":430,"y":1380,"wires":[["f6bc9ce.20d1b6"]]},{"id":"aa233fc1.63543","type":"function","z":"f6f2187d.f17ca8","name":"Actions Logic","func":"// Obtener el objeto 'court' del contexto de flujo\nlet court = flow.get('court') || {matchs: {currentGame: {pointsA: 0, pointsB: 0}, history: [], sets: []}};\n\n// Evaluar la acción proveniente del nodo inject\nswitch (msg.payload.action) {\n    case \"A\":\n        // Sumar punto al Equipo A\n        court.matchs.currentGame.pointsA += 1;\n        court.matchs.history.push({action: \"pointA\"});\n        break;\n    case \"B\":\n        // Sumar punto al Equipo B\n        court.matchs.currentGame.pointsB += 1;\n        court.matchs.history.push({action: \"pointB\"});\n        break;\n    case \"Undo\":\n        // Deshacer la última acción\n        let lastAction = court.matchs.history.pop();\n        if (lastAction) {\n            switch (lastAction.action) {\n                case \"pointA\":\n                    court.matchs.currentGame.pointsA -= 1;\n                    break;\n                case \"pointB\":\n                    court.matchs.currentGame.pointsB -= 1;\n                    break;\n                // Agregar más casos si hay otras acciones que deshacer\n            }\n        }\n        break;\n    case \"Reset\":\n        // Reiniciar el partido\n        court.matchs.sets = [];\n        court.matchs.currentGame = {pointsA: 0, pointsB: 0};\n        court.matchs.history = [];\n        break;\n    default:\n        // Por si se recibe una acción no esperada\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n        break;\n}\n\n// Guardar el estado actualizado\nflow.set('court', court);\n\n// Pasar el estado actualizado al siguiente nodo (si es necesario)\nreturn {payload: court};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":170,"y":1580,"wires":[[]]},{"id":"435d4ab3.5afc44","type":"inject","z":"993456db.6e41d8","g":"240afd9c.4f5402","name":"B","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"teamB","payload":"{\"action\": \"B\"}","payloadType":"json","x":130,"y":220,"wires":[["24f584ef.1f069c","5c8c51a1.c2016"]]},{"id":"108919a2.d39446","type":"inject","z":"993456db.6e41d8","g":"240afd9c.4f5402","name":"Undo","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"undo","payload":"{\"action\": \"Undo\"}","payloadType":"json","x":130,"y":260,"wires":[["24f584ef.1f069c","5c8c51a1.c2016"]]},{"id":"24f584ef.1f069c","type":"debug","z":"993456db.6e41d8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":290,"y":140,"wires":[]},{"id":"8e1b9975.402078","type":"inject","z":"993456db.6e41d8","g":"240afd9c.4f5402","name":"Reset","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"reset","payload":"{\"action\": \"Reset\"}","payloadType":"json","x":130,"y":140,"wires":[["24f584ef.1f069c","5c8c51a1.c2016"]]},{"id":"90c5e874.c67b88","type":"inject","z":"993456db.6e41d8","g":"240afd9c.4f5402","name":"A","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"teamA","payload":"{\"action\": \"A\"}","payloadType":"json","x":130,"y":180,"wires":[["24f584ef.1f069c","5c8c51a1.c2016"]]},{"id":"95836f17.249f4","type":"debug","z":"993456db.6e41d8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":40,"wires":[]},{"id":"fd5eded.af67f2","type":"debug","z":"993456db.6e41d8","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":430,"y":40,"wires":[]},{"id":"5c8c51a1.c2016","type":"function","z":"993456db.6e41d8","name":"Actions Logic","func":"\n//////////////////////////////////////////////////////////////////////\nfunction newMatch(){\n        function generateUniqueID() {\n        return Date.now().toString(36) + Math.random().toString(36).substring(2);\n    }\n    return {\n        matchID: generateUniqueID(),  // Generar un ID único para el partido\n        //gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n        startTime: msg.timestamp,\n        score: {\n            sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n            setsWins:[0,0],                 // Indica el resultado de sets ganados\n            currentSet: 0,                  // Índice del set actual en el array de sets\n            currentGame: [0, 0],            // Puntuación del juego actual\n            gameFormated: [0,0],            //Formateo de puntuación del game actual\n            inTiebreak: false,               // Flag para indicar si el juego actual es un tiebreak\n            matchStatus:\"inProgress\" \n        },\n        actionHistory: [],  // Historial de todas las acciones realizadas\n        scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n    }    \n        \n}\n//////////////////////////////////////////////////////////////////////\nfunction updateScore(teamIndex) {\n    console.log(`------------------updating`);\n    let cG = quadra.match.score.currentGame;\n    let cSI = quadra.match.score.currentSet;\n    let cS = quadra.match.score.sets[cSI];\n    let setsWins = quadra.match.score.setsWins;\n    let inTiebreak = quadra.match.score.inTiebreak;\n\n    quadra.match.actionHistory.push({action: teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(JSON.parse(JSON.stringify(quadra.match.score))); \n\n    cG[teamIndex] += 1;\n        console.log( \"----->cs:\",cS, \" cSI:\" , cSI, \" cGame:\", cG);\n\n    if (inTiebreak) {\n        console.log( \"---Estoy en Tiebreak--> \");\n        // Manejar puntuación en tiebreak: simplemente incrementar puntos\n        if ((cG[0] >= 7 || cG[1] >= 7) && Math.abs(cG[0] - cG[1]) >= 2) { // Condición para ganar el tiebreak\n                console.log(\"Condición ganador tiebreak \")\n            cS[teamIndex] += 1;\n            if (cSI <= cS.length) {\n                cSI +=1;\n                setsWins[teamIndex] += 1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice me muevo al siguiente SET`);\n                }\n            cG = [0, 0]; // Reiniciar juego\n            inTiebreak = false; // Salir del modo tiebreak\n                console.log( \"---Finalizó Tiebreak--> \", \"ganó el set el team : \",teamIndex);\n        }\n    } else {\n        // Verificar si hay un ganador del Game\n        if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n            //sumo 1 al set correspondiente y \n             cS[teamIndex]+=1;\n            // Verificar si hay un ganador del set\n            if (cS[0] === 6 && cS[1] === 6) { // Comprobar si se necesita iniciar un tiebreak\n                inTiebreak = true;\n                //cG = [0, 0]; // Reiniciar puntuación para tiebreak\n            }\n            if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n                //if (cSI < cS.length - 1) {\n                if (cSI <= cS.length) {\n                    cSI +=1;\n                    setsWins[teamIndex] += 1;\n                    cS = [0 , 0];\n                        console.log(`incremento de indice me muevo al siguiente SET`);\n                }\n            }\n            cG = [0, 0];  // Reiniciar el juego actual\n        }\n    }\n    if (setsWins[0] === 2 || setsWins[1] === 2) {\n        // Alguno de los equipos ha ganado el partido\n        console.log(\"El partido ha terminado. Un equipo ha ganado 2 sets.\");\n        quadra.match.score.matchStatus = \"completed\";\n    } \n    // Actualizar el estado global\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS;\n    quadra.match.score.setsWins = setsWins;\n    quadra.match.score.inTiebreak = inTiebreak;\n    quadra.match.score.gameFormated = inTiebreak ? cG : formatGame(cG);\n}\n//////////////////////////////////////////////////////////////////////////////////////////\nfunction formatGame(gameStatus) {\n    let pointsA = JSON.parse(JSON.stringify(gameStatus[0]));\n    let pointsB = JSON.parse(JSON.stringify(gameStatus[1]));\n\n        if (pointsA >= 3 && pointsB >= 3) {  //si los dos son mayores que3\n            console.log(\"pointsA y pointsB mayores que 3\");\n            if (pointsA === pointsB) {\n                console.log(\"pointsA === pointsB retorna 40-40\");\n                return [\"40\",\"40\"];  // Deuce\n            }\n            if (pointsA > pointsB) {\n                console.log(\"pointsA > pointsB retorna AD-40\");\n                return [\"AD\",\"40\"];\n            }\n            if (pointsB > pointsA){\n                console.log(\"pointsA < pointsB retorna 40-AD\");\n                return [\"40\" , \"AD\"];\n            }\n            \n        }\n        else{\n            console.log(\"pointsA & pointsB menor a 3 entonces\");\n            console.log([formatPoint(pointsA) , formatPoint(pointsB)]);\n            return [formatPoint(pointsA) , formatPoint(pointsB)];\n        }\n        function formatPoint (point){\n        return  point === 0 ? \"0\" :\n                point === 1 ? \"15\" :\n                point === 2 ? \"30\" :\n                point === 3 ? \"40\" :\n                \"AD\";    \n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////\n// Obtener el objeto 'quadra' del contexto de flujo\nlet quadra = flow.get('quadra') || {match : newMatch()}\n// Evaluar la acción proveniente del nodo inject\nswitch (msg.payload.action) {\n    case \"A\":\n        // Sumar punto al Equipo A\n        if (quadra.match.score.matchStatus===\"inProgress\"){\n            updateScore(0);\n        }\n        break;\n    case \"B\":\n        // Sumar punto al Equipo B\n        if (quadra.match.score.matchStatus===\"inProgress\"){\n        updateScore(1);\n        }\n        break;\n    case \"Undo\":\n    // Deshacer la última acción\n    let aH = quadra.match.actionHistory;\n    let sH = quadra.match.scoreHistory;\n    if (aH.length > 0 && sH.length > 0){\n        quadra.match.actionHistory.pop();   //Delete last action\n        let previousState = quadra.match.scoreHistory.pop();    //Delete last score\n            console.log(\"Undo - Restoring to previous state:\", previousState);\n        // Restaurar el estado completo del partido\n        quadra.match.score = JSON.parse(JSON.stringify(previousState));\n    }\n        break;\n    case \"Reset\":\n        quadra.match = newMatch();\n        break;\n    default:\n        // Por si se recibe una acción no esperada\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n        break;\n}\n// Guardar el estado actualizado\nflow.set('quadra', quadra);\nmsg.payload.quadra=quadra;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":370,"y":220,"wires":[["fd5eded.af67f2","5e28941.ebafb6c","8fb7ac7d.3dca5"]]},{"id":"65aa1597.0a17dc","type":"function","z":"993456db.6e41d8","name":"set 0","func":"let quadra = {\n    match: {\n        matchID: \"\",  // Generar un ID único para el partido\n        gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n        score: {\n            sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n            setsWins:[0,0],                 // Indica el resultado de sets ganados\n            currentSet: 0,                  // Índice del set actual en el array de sets\n            currentGame: [0, 0],            // Puntuación del juego actual\n            gameFormated: [0,0],            //Formateo de puntuación del game actual\n            inTiebreak: false,               // Flag para indicar si el juego actual es un tiebreak\n            matchStatus:\"inProgress\" \n        },\n        actionHistory: [],  // Historial de todas las acciones realizadas\n        scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n    }    \n};\nflow.set('quadra', quadra);\nreturn {payload: quadra};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":270,"y":40,"wires":[[]]},{"id":"5a8ea923.8ebf28","type":"function","z":"f6f2187d.f17ca8","name":"Points Logic","func":"// Obtener el estado actual del partido desde el contexto\nlet court = flow.get('court');\n\n// Acciones basadas en el estado actual de pointsA y pointsB\nfunction updateGameStatus() {\n    let game = court.matchs.currentGame;\n    let sets = court.matchs.sets;\n    let currentSet = sets[sets.length - 1] || { gamesA: 0, gamesB: 0 };\n\n    // Comprobar si hay ganador del juego\n    if ((game.pointsA >= 4 && game.pointsA - game.pointsB >= 2) || (game.pointsB >= 4 && game.pointsB - game.pointsA >= 2)) {\n        // Determinar el ganador del juego\n        if (game.pointsA > game.pointsB) {\n            currentSet.gamesA++;\n        } else {\n            currentSet.gamesB++;\n        }\n\n        // Comprobar si el set se ha ganado\n        if ((currentSet.gamesA >= 6 && currentSet.gamesA - currentSet.gamesB >= 2) ||\n            (currentSet.gamesB >= 6 && currentSet.gamesB - currentSet.gamesA >= 2)) {\n            // Finalizar el set y preparar para un nuevo set o tiebreak\n            sets.push({ gamesA: 0, gamesB: 0 });\n        }\n\n        // Resetear puntos para el siguiente juego\n        game.pointsA = 0;\n        game.pointsB = 0;\n    }\n\n    // Guardar cambios en el contexto\n    flow.set('court', court);\n}\n\n// Ejecutar la lógica de actualización\nupdateGameStatus();\n\n// Pasar el estado actualizado al siguiente nodo\nreturn { payload: court };","outputs":1,"noerr":0,"initialize":"","finalize":"","x":690,"y":1540,"wires":[[]]},{"id":"1039a8e6.633857","type":"inject","z":"993456db.6e41d8","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":120,"y":40,"wires":[["65aa1597.0a17dc"]]},{"id":"c1788cb1.b4d79","type":"function","z":"993456db.6e41d8","name":"Actions Logic 29062024 10am","func":"function generateUniqueID() {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2);\n}\n\n//////////////////////////////////////////////////////////////////////\nfunction updateScore(teamIndex) {\n    console.log(`------------------updating`);\n //asigno valores globales a variables locales para facilitar la manipulación dentro de los condicionales, cuando tengo que cambiar valores utilizo la notación completa de la variable global\n    let cG = quadra.match.score.currentGame;    //currentGame\n    let cSI = quadra.match.score.currentSet;    //currenSetIndex\n    let cS = quadra.match.score.sets[cSI];      //currenSet\n    let pS = JSON.parse(JSON.stringify(quadra.match.score)); // Hacer una copia profunda antes de modificar//previousScore\n   \n    //console.log( \"----->cs: \",cS, \" cSI:\" , cSI, \" pScore:\", pS);\n    \n    //Registro en los historiales\n    quadra.match.actionHistory.push({action:teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(pS);\n    // Incrementar el punto para el equipo especificado y al final de la función actualizo valores globales\n    cG[teamIndex] += 1;\n\n    // Verificar si hay un ganador del Game\n    if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n        //sumo 1 al set correspondiente y \n         cS[teamIndex]+=1;\n        // Verificar si hay un ganador del set\n        if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n            //if (cSI < cS.length - 1) {\n            if (cSI < cS.length) {\n                cSI +=1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice`);\n\n            } else {\n                  // me muevo al otro set o si ya estaba en el tercer set GANADOR DEL PARTIDO en otra función\n              console.log(`+++++++++++++++++++FindePartido+++++++++++++++++++++`);\n            }\n        }\n        // Reiniciar el juego actual\n        cG[0] = 0;\n        cG[1] = 0;\n    }\n    let cfG =JSON.parse(JSON.stringify(formatGame(cG)));\n    //console.log(\"-----__>currentGame\", cG);\n    //console.log(\"-----__> game FOrmated -> \", cfG);\n    //console.log(\"game FOrmated -> \", formatGame(cG));\n    //console.log(\"game FOrmated -> \", formatGame(cG[0]), \" \", formatGame(cG[1]));\n\n    // Actualizo valores globales\n    quadra.match.score.gameFormated =[cfG];     //Escribo el valor del game formateado en su campo del score\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS ; \n}\n//////////////////////////////////////////////////////////////////////////////////////////\nfunction formatGame(gameStatus) {\n    let pointsA = JSON.parse(JSON.stringify(gameStatus[0]));\n    let pointsB = JSON.parse(JSON.stringify(gameStatus[1]));\n\n        if (pointsA >= 3 && pointsB >= 3) {  //si los dos son mayores que3\n            console.log(\"pointsA y pointsB mayores que 3\");\n            if (pointsA === pointsB) {\n                console.log(\"pointsA === pointsB retorna 40-40\");\n                return [\"40\",\"40\"];  // Deuce\n            }\n            if (pointsA > pointsB) {\n                console.log(\"pointsA > pointsB retorna AD-40\");\n                return [\"AD\",\"40\"];\n            }\n            if (pointsB > pointsA){\n                console.log(\"pointsA < pointsB retorna 40-AD\");\n                return [\"40\" , \"AD\"];\n            }\n            \n        }\n        else{\n            console.log(\"pointsA & pointsB menor a 3 entonces\");\n            console.log([formatPoint(pointsA) , formatPoint(pointsB)]);\n            return [formatPoint(pointsA) , formatPoint(pointsB)];\n        }\n        function formatPoint (point){\n        return  point === 0 ? \"0\" :\n                point === 1 ? \"15\" :\n                point === 2 ? \"30\" :\n                point === 3 ? \"40\" :\n                \"AD\";    \n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////\n// Obtener el objeto 'quadra' del contexto de flujo\nlet quadra = flow.get('quadra') || {\n    match: {\n        matchID: generateUniqueID(),  // Generar un ID único para el partido\n        gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n        score: {\n            sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n            currentSet: 0,  // Índice del set actual en el array de sets\n            currentGame: [0, 0],  // Puntuación del juego actual\n            gameFormated: [0,0]     //Formateo de puntuación del game actual\n        },\n        actionHistory: [],  // Historial de todas las acciones realizadas\n        scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n    }    \n};\n// Evaluar la acción proveniente del nodo inject\nswitch (msg.payload.action) {\n    case \"A\":\n        // Sumar punto al Equipo A\n        updateScore(0);\n        break;\n    case \"B\":\n        // Sumar punto al Equipo B\n        updateScore(1);\n        break;\n    case \"Undo\":\n    // Deshacer la última acción\n    let aH = quadra.match.actionHistory;\n    let sH = quadra.match.scoreHistory;\n    if (aH.length > 0 && sH.length > 0){\n        quadra.match.actionHistory.pop();   //Delete last action\n        let previousState = quadra.match.scoreHistory.pop();    //Delete last score\n            console.log(\"Undo - Restoring to previous state:\", previousState);\n        // Restaurar el estado completo del partido\n        quadra.match.score = JSON.parse(JSON.stringify(previousState));\n    }\n           // quadra.match.scoreHistory.pop();    //Delete last score\n        break;\n    case \"Reset\":\n        // Reiniciar el partido\n        quadra.match.score.sets = [[0, 0], [0, 0], [0, 0]];\n        quadra.match.score.currentSet = 0;\n        quadra.match.score.currentGame = [0, 0];\n        quadra.match.score.gameFormated = [0, 0];\n        quadra.match.actionHistory = [];\n        quadra.match.scoreHistory = [];\n        quadra.match.gameTime= 0; // Tiempo transcurrido del partido en segundos o formato deseado\n        break;\n    default:\n        // Por si se recibe una acción no esperada\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n        break;\n}\n\n// Guardar el estado actualizado\nflow.set('quadra', quadra);\n\n// Pasar el estado actualizado al siguiente nodo (si es necesario)\nreturn {payload: quadra};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1270,"y":200,"wires":[[]]},{"id":"80f1b50c.1b6028","type":"function","z":"993456db.6e41d8","name":"Actions Logic 29062024 10.30am","func":"function generateUniqueID() {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2);\n}\n//////////////////////////////////////////////////////////////////////\nfunction newMatch(){\n        return {\n            matchID: generateUniqueID(),  // Generar un ID único para el partido\n            gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n            score: {\n                sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n                currentSet: 0,  // Índice del set actual en el array de sets\n                currentGame: [0, 0],  // Puntuación del juego actual\n                gameFormated: [0,0]     //Formateo de puntuación del game actual\n            },\n            actionHistory: [],  // Historial de todas las acciones realizadas\n            scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n        }    \n        \n}\n//////////////////////////////////////////////////////////////////////\nfunction updateScore(teamIndex) {\n    console.log(`------------------updating`);\n //asigno valores globales a variables locales para facilitar la manipulación dentro de los condicionales, cuando tengo que cambiar valores utilizo la notación completa de la variable global\n    let cG = quadra.match.score.currentGame;    //currentGame\n    let cSI = quadra.match.score.currentSet;    //currenSetIndex\n    let cS = quadra.match.score.sets[cSI];      //currenSet\n    let pS = JSON.parse(JSON.stringify(quadra.match.score)); // Hacer una copia profunda antes de modificar//previousScore\n   \n    //console.log( \"----->cs: \",cS, \" cSI:\" , cSI, \" pScore:\", pS);\n    \n    //Registro en los historiales\n    quadra.match.actionHistory.push({action:teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(pS);\n    // Incrementar el punto para el equipo especificado y al final de la función actualizo valores globales\n    cG[teamIndex] += 1;\n\n    // Verificar si hay un ganador del Game\n    if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n        //sumo 1 al set correspondiente y \n         cS[teamIndex]+=1;\n        // Verificar si hay un ganador del set\n        if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n            //if (cSI < cS.length - 1) {\n            if (cSI < cS.length) {\n                cSI +=1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice`);\n\n            } else {\n                  // me muevo al otro set o si ya estaba en el tercer set GANADOR DEL PARTIDO en otra función\n              console.log(`+++++++++++++++++++FindePartido+++++++++++++++++++++`);\n            }\n        }\n        // Reiniciar el juego actual\n        cG[0] = 0;\n        cG[1] = 0;\n    }\n    let cfG =JSON.parse(JSON.stringify(formatGame(cG)));\n    //console.log(\"-----__>currentGame\", cG);\n    //console.log(\"-----__> game FOrmated -> \", cfG);\n    //console.log(\"game FOrmated -> \", formatGame(cG));\n    //console.log(\"game FOrmated -> \", formatGame(cG[0]), \" \", formatGame(cG[1]));\n\n    // Actualizo valores globales\n    quadra.match.score.gameFormated =[cfG];     //Escribo el valor del game formateado en su campo del score\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS ; \n}\n//////////////////////////////////////////////////////////////////////////////////////////\nfunction formatGame(gameStatus) {\n    let pointsA = JSON.parse(JSON.stringify(gameStatus[0]));\n    let pointsB = JSON.parse(JSON.stringify(gameStatus[1]));\n\n        if (pointsA >= 3 && pointsB >= 3) {  //si los dos son mayores que3\n            console.log(\"pointsA y pointsB mayores que 3\");\n            if (pointsA === pointsB) {\n                console.log(\"pointsA === pointsB retorna 40-40\");\n                return [\"40\",\"40\"];  // Deuce\n            }\n            if (pointsA > pointsB) {\n                console.log(\"pointsA > pointsB retorna AD-40\");\n                return [\"AD\",\"40\"];\n            }\n            if (pointsB > pointsA){\n                console.log(\"pointsA < pointsB retorna 40-AD\");\n                return [\"40\" , \"AD\"];\n            }\n            \n        }\n        else{\n            console.log(\"pointsA & pointsB menor a 3 entonces\");\n            console.log([formatPoint(pointsA) , formatPoint(pointsB)]);\n            return [formatPoint(pointsA) , formatPoint(pointsB)];\n        }\n        function formatPoint (point){\n        return  point === 0 ? \"0\" :\n                point === 1 ? \"15\" :\n                point === 2 ? \"30\" :\n                point === 3 ? \"40\" :\n                \"AD\";    \n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////\n// Obtener el objeto 'quadra' del contexto de flujo\nlet quadra = flow.get('quadra') || {match : newMatch()}\n    /*{match: {\n        matchID: generateUniqueID(),  // Generar un ID único para el partido\n        gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n        score: {\n            sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n            currentSet: 0,  // Índice del set actual en el array de sets\n            currentGame: [0, 0],  // Puntuación del juego actual\n            gameFormated: [0,0]     //Formateo de puntuación del game actual\n        },\n        actionHistory: [],  // Historial de todas las acciones realizadas\n        scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n    } }   */\n\n// Evaluar la acción proveniente del nodo inject\nswitch (msg.payload.action) {\n    case \"A\":\n        // Sumar punto al Equipo A\n        updateScore(0);\n        break;\n    case \"B\":\n        // Sumar punto al Equipo B\n        updateScore(1);\n        break;\n    case \"Undo\":\n    // Deshacer la última acción\n    let aH = quadra.match.actionHistory;\n    let sH = quadra.match.scoreHistory;\n    if (aH.length > 0 && sH.length > 0){\n        quadra.match.actionHistory.pop();   //Delete last action\n        let previousState = quadra.match.scoreHistory.pop();    //Delete last score\n            console.log(\"Undo - Restoring to previous state:\", previousState);\n        // Restaurar el estado completo del partido\n        quadra.match.score = JSON.parse(JSON.stringify(previousState));\n    }\n           // quadra.match.scoreHistory.pop();    //Delete last score\n        break;\n    case \"Reset\":\n        quadra.match = newMatch();\n        // Reiniciar el partido\n        /*quadra.match.score.sets = [[0, 0], [0, 0], [0, 0]];\n        quadra.match.score.currentSet = 0;\n        quadra.match.score.currentGame = [0, 0];\n        quadra.match.score.gameFormated = [0, 0];\n        quadra.match.actionHistory = [];\n        quadra.match.scoreHistory = [];\n        quadra.match.gameTime= 0; // Tiempo transcurrido del partido en segundos o formato deseado\n        */\n        break;\n    default:\n        // Por si se recibe una acción no esperada\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n        break;\n}\n\n// Guardar el estado actualizado\nflow.set('quadra', quadra);\n\n// Pasar el estado actualizado al siguiente nodo (si es necesario)\nreturn {payload: quadra};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1280,"y":160,"wires":[[]]},{"id":"ce791949.5e5bb8","type":"function","z":"993456db.6e41d8","name":"Actions Logic 29062024 11.30am","func":"function generateUniqueID() {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2);\n}\n//////////////////////////////////////////////////////////////////////\nfunction newMatch(){\n        return {\n            matchID: generateUniqueID(),  // Generar un ID único para el partido\n            gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n            score: {\n                sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n                currentSet: 0,                  // Índice del set actual en el array de sets\n                currentGame: [0, 0],            // Puntuación del juego actual\n                gameFormated: [0,0],            //Formateo de puntuación del game actual\n                inTiebreak: false               // Flag para indicar si el juego actual es un tiebreak\n            },\n            actionHistory: [],  // Historial de todas las acciones realizadas\n            scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n        }    \n        \n}\n//////////////////////////////////////////////////////////////////////\nfunction updateScore(teamIndex) {\n    console.log(`------------------updating`);\n /*//asigno valores globales a variables locales para facilitar la manipulación dentro de los condicionales, cuando tengo que cambiar valores utilizo la notación completa de la variable global\n    let cG = quadra.match.score.currentGame;    //currentGame\n    let cSI = quadra.match.score.currentSet;    //currenSetIndex\n    let cS = quadra.match.score.sets[cSI];      //currenSet\n    let pS = JSON.parse(JSON.stringify(quadra.match.score)); // Hacer una copia profunda antes de modificar//previousScore\n   \n    //console.log( \"----->cs: \",cS, \" cSI:\" , cSI, \" pScore:\", pS);\n    \n    //Registro en los historiales\n    quadra.match.actionHistory.push({action:teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(pS);\n    // Incrementar el punto para el equipo especificado y al final de la función actualizo valores globales\n    cG[teamIndex] += 1;\n\n    // Verificar si hay un ganador del Game\n    if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n        //sumo 1 al set correspondiente y \n         cS[teamIndex]+=1;\n        // Verificar si hay un ganador del set\n        if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n            //if (cSI < cS.length - 1) {\n            if (cSI < cS.length) {\n                cSI +=1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice`);\n\n            } else {\n                  // me muevo al otro set o si ya estaba en el tercer set GANADOR DEL PARTIDO en otra función\n              console.log(`+++++++++++++++++++FindePartido+++++++++++++++++++++`);\n            }\n        }\n        // Reiniciar el juego actual\n        cG[0] = 0;\n        cG[1] = 0;\n    }\n    let cfG =JSON.parse(JSON.stringify(formatGame(cG)));\n    //console.log(\"-----__>currentGame\", cG);\n    //console.log(\"-----__> game FOrmated -> \", cfG);\n    //console.log(\"game FOrmated -> \", formatGame(cG));\n    //console.log(\"game FOrmated -> \", formatGame(cG[0]), \" \", formatGame(cG[1]));\n\n    // Actualizo valores globales\n    quadra.match.score.gameFormated =[cfG];     //Escribo el valor del game formateado en su campo del score\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS ; */\n    ///--------------------------------/////---------////\n    \n\n    let cG = quadra.match.score.currentGame;\n    let cSI = quadra.match.score.currentSet;\n    let cS = quadra.match.score.sets[cSI];\n    let inTiebreak = quadra.match.score.inTiebreak;\n\n    quadra.match.actionHistory.push({action: teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(JSON.parse(JSON.stringify(quadra.match.score))); \n\n    cG[teamIndex] += 1;\n        console.log( \"----->cs:\",cS, \" cSI:\" , cSI, \" cGame:\", cG);\n\n    if (inTiebreak) {\n        console.log( \"---Estoy en Tiebreak--> \");\n        // Manejar puntuación en tiebreak: simplemente incrementar puntos\n        if ((cG[0] >= 7 || cG[1] >= 7) && Math.abs(cG[0] - cG[1]) >= 2) { // Condición para ganar el tiebreak\n                console.log(\"Condición ganador tiebreak \")\n            cS[teamIndex] += 1;\n            if (cSI <= cS.length) {\n                cSI +=1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice me muevo al siguiente SET`);\n    \n                }\n            cG = [0, 0]; // Reiniciar juego\n            inTiebreak = false; // Salir del modo tiebreak\n                console.log( \"---Finalizó Tiebreak--> \", \"ganó el set el team : \",teamIndex);\n        }\n    } else {\n        /*if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n            cS[teamIndex] += 1;\n            if (cS[0] === 6 && cS[1] === 6) { // Comprobar si se necesita iniciar un tiebreak\n                inTiebreak = true;\n                cG = [0, 0]; // Reiniciar puntuación para tiebreak\n            } else if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n                // Ganar el set y preparar para el próximo set\n                if (cSI < quadra.match.score.sets.length - 1) {\n                    cSI += 1;\n                } else {\n                    console.log(\"Fin del partido\");\n                }\n                cG = [0, 0];\n            }\n        }*/\n        // Verificar si hay un ganador del Game\n        if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n            //sumo 1 al set correspondiente y \n             cS[teamIndex]+=1;\n            // Verificar si hay un ganador del set\n            if (cS[0] === 6 && cS[1] === 6) { // Comprobar si se necesita iniciar un tiebreak\n                inTiebreak = true;\n                //cG = [0, 0]; // Reiniciar puntuación para tiebreak\n            }\n            if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n                //if (cSI < cS.length - 1) {\n                if (cSI <= cS.length) {\n                    cSI +=1;\n                    cS = [0 , 0];\n                        console.log(`incremento de indice me muevo al siguiente SET`);\n    \n                }\n            }\n            // Reiniciar el juego actual\n            cG[0] = 0;\n            cG[1] = 0;\n        }\n    }\n    // Actualizar el estado global\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS;\n    quadra.match.score.inTiebreak = inTiebreak;\n    quadra.match.score.gameFormated = inTiebreak ? cG : formatGame(cG); // Formatear juego solo si no está en tiebreak\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////\nfunction formatGame(gameStatus) {\n    let pointsA = JSON.parse(JSON.stringify(gameStatus[0]));\n    let pointsB = JSON.parse(JSON.stringify(gameStatus[1]));\n\n        if (pointsA >= 3 && pointsB >= 3) {  //si los dos son mayores que3\n            console.log(\"pointsA y pointsB mayores que 3\");\n            if (pointsA === pointsB) {\n                console.log(\"pointsA === pointsB retorna 40-40\");\n                return [\"40\",\"40\"];  // Deuce\n            }\n            if (pointsA > pointsB) {\n                console.log(\"pointsA > pointsB retorna AD-40\");\n                return [\"AD\",\"40\"];\n            }\n            if (pointsB > pointsA){\n                console.log(\"pointsA < pointsB retorna 40-AD\");\n                return [\"40\" , \"AD\"];\n            }\n            \n        }\n        else{\n            console.log(\"pointsA & pointsB menor a 3 entonces\");\n            console.log([formatPoint(pointsA) , formatPoint(pointsB)]);\n            return [formatPoint(pointsA) , formatPoint(pointsB)];\n        }\n        function formatPoint (point){\n        return  point === 0 ? \"0\" :\n                point === 1 ? \"15\" :\n                point === 2 ? \"30\" :\n                point === 3 ? \"40\" :\n                \"AD\";    \n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////\n// Obtener el objeto 'quadra' del contexto de flujo\nlet quadra = flow.get('quadra') || {match : newMatch()}\n    /*{match: {\n        matchID: generateUniqueID(),  // Generar un ID único para el partido\n        gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n        score: {\n            sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n            currentSet: 0,  // Índice del set actual en el array de sets\n            currentGame: [0, 0],  // Puntuación del juego actual\n            gameFormated: [0,0]     //Formateo de puntuación del game actual\n        },\n        actionHistory: [],  // Historial de todas las acciones realizadas\n        scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n    } }   */\n\n// Evaluar la acción proveniente del nodo inject\nswitch (msg.payload.action) {\n    case \"A\":\n        // Sumar punto al Equipo A\n        updateScore(0);\n        break;\n    case \"B\":\n        // Sumar punto al Equipo B\n        updateScore(1);\n        break;\n    case \"Undo\":\n    // Deshacer la última acción\n    let aH = quadra.match.actionHistory;\n    let sH = quadra.match.scoreHistory;\n    if (aH.length > 0 && sH.length > 0){\n        quadra.match.actionHistory.pop();   //Delete last action\n        let previousState = quadra.match.scoreHistory.pop();    //Delete last score\n            console.log(\"Undo - Restoring to previous state:\", previousState);\n        // Restaurar el estado completo del partido\n        quadra.match.score = JSON.parse(JSON.stringify(previousState));\n    }\n           // quadra.match.scoreHistory.pop();    //Delete last score\n        break;\n    case \"Reset\":\n        quadra.match = newMatch();\n        // Reiniciar el partido\n        /*quadra.match.score.sets = [[0, 0], [0, 0], [0, 0]];\n        quadra.match.score.currentSet = 0;\n        quadra.match.score.currentGame = [0, 0];\n        quadra.match.score.gameFormated = [0, 0];\n        quadra.match.actionHistory = [];\n        quadra.match.scoreHistory = [];\n        quadra.match.gameTime= 0; // Tiempo transcurrido del partido en segundos o formato deseado\n        */\n        break;\n    default:\n        // Por si se recibe una acción no esperada\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n        break;\n}\n\n// Guardar el estado actualizado\nflow.set('quadra', quadra);\n\n// Pasar el estado actualizado al siguiente nodo (si es necesario)\nreturn {payload: quadra};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1280,"y":120,"wires":[[]]},{"id":"27f12061.5242a","type":"ui_text","z":"993456db.6e41d8","g":"e1ffd6f4.380a08","group":"bfa50861.979ed8","order":0,"width":"10","height":"4","name":"GameFormatted","label":"GAME","format":"{{msg.payload[0]}}","layout":"col-center","className":"gameFormatted","style":true,"font":"Tahoma,Geneva,sans-serif","fontSize":"60","color":"#732121","x":960,"y":40,"wires":[]},{"id":"7cb91e30.8eac5","type":"ui_text","z":"993456db.6e41d8","g":"e1ffd6f4.380a08","group":"bfa50861.979ed8","order":0,"width":"10","height":"2","name":"Set","label":"Set actual:","format":"{{msg.payload[1]}}","layout":"col-center","className":"set","style":true,"font":"Tahoma,Geneva,sans-serif","fontSize":"40","color":"#1e00ff","x":930,"y":80,"wires":[]},{"id":"40df2da4.e16614","type":"function","z":"993456db.6e41d8","name":"Actions Logic 01072024 11.30am","func":"function generateUniqueID() {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2);\n}\n//////////////////////////////////////////////////////////////////////\nfunction newMatch(){\n        return {\n            matchID: generateUniqueID(),  // Generar un ID único para el partido\n            //gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n            startTime: msg.timestamp,\n            score: {\n                sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n                currentSet: 0,                  // Índice del set actual en el array de sets\n                currentGame: [0, 0],            // Puntuación del juego actual\n                gameFormated: [0,0],            //Formateo de puntuación del game actual\n                inTiebreak: false               // Flag para indicar si el juego actual es un tiebreak\n            },\n            actionHistory: [],  // Historial de todas las acciones realizadas\n            scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n        }    \n        \n}\n//////////////////////////////////////////////////////////////////////\nfunction updateScore(teamIndex) {\n    console.log(`------------------updating`);\n /*//asigno valores globales a variables locales para facilitar la manipulación dentro de los condicionales, cuando tengo que cambiar valores utilizo la notación completa de la variable global\n    let cG = quadra.match.score.currentGame;    //currentGame\n    let cSI = quadra.match.score.currentSet;    //currenSetIndex\n    let cS = quadra.match.score.sets[cSI];      //currenSet\n    let pS = JSON.parse(JSON.stringify(quadra.match.score)); // Hacer una copia profunda antes de modificar//previousScore\n   \n    //console.log( \"----->cs: \",cS, \" cSI:\" , cSI, \" pScore:\", pS);\n    \n    //Registro en los historiales\n    quadra.match.actionHistory.push({action:teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(pS);\n    // Incrementar el punto para el equipo especificado y al final de la función actualizo valores globales\n    cG[teamIndex] += 1;\n\n    // Verificar si hay un ganador del Game\n    if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n        //sumo 1 al set correspondiente y \n         cS[teamIndex]+=1;\n        // Verificar si hay un ganador del set\n        if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n            //if (cSI < cS.length - 1) {\n            if (cSI < cS.length) {\n                cSI +=1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice`);\n\n            } else {\n                  // me muevo al otro set o si ya estaba en el tercer set GANADOR DEL PARTIDO en otra función\n              console.log(`+++++++++++++++++++FindePartido+++++++++++++++++++++`);\n            }\n        }\n        // Reiniciar el juego actual\n        cG[0] = 0;\n        cG[1] = 0;\n    }\n    let cfG =JSON.parse(JSON.stringify(formatGame(cG)));\n    //console.log(\"-----__>currentGame\", cG);\n    //console.log(\"-----__> game FOrmated -> \", cfG);\n    //console.log(\"game FOrmated -> \", formatGame(cG));\n    //console.log(\"game FOrmated -> \", formatGame(cG[0]), \" \", formatGame(cG[1]));\n\n    // Actualizo valores globales\n    quadra.match.score.gameFormated =[cfG];     //Escribo el valor del game formateado en su campo del score\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS ; */\n    ///--------------------------------/////---------////\n    \n\n    let cG = quadra.match.score.currentGame;\n    let cSI = quadra.match.score.currentSet;\n    let cS = quadra.match.score.sets[cSI];\n    let inTiebreak = quadra.match.score.inTiebreak;\n\n    quadra.match.actionHistory.push({action: teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(JSON.parse(JSON.stringify(quadra.match.score))); \n\n    cG[teamIndex] += 1;\n        console.log( \"----->cs:\",cS, \" cSI:\" , cSI, \" cGame:\", cG);\n\n    if (inTiebreak) {\n        console.log( \"---Estoy en Tiebreak--> \");\n        // Manejar puntuación en tiebreak: simplemente incrementar puntos\n        if ((cG[0] >= 7 || cG[1] >= 7) && Math.abs(cG[0] - cG[1]) >= 2) { // Condición para ganar el tiebreak\n                console.log(\"Condición ganador tiebreak \")\n            cS[teamIndex] += 1;\n            if (cSI <= cS.length) {\n                cSI +=1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice me muevo al siguiente SET`);\n    \n                }\n            cG = [0, 0]; // Reiniciar juego\n            inTiebreak = false; // Salir del modo tiebreak\n                console.log( \"---Finalizó Tiebreak--> \", \"ganó el set el team : \",teamIndex);\n        }\n    } else {\n        /*if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n            cS[teamIndex] += 1;\n            if (cS[0] === 6 && cS[1] === 6) { // Comprobar si se necesita iniciar un tiebreak\n                inTiebreak = true;\n                cG = [0, 0]; // Reiniciar puntuación para tiebreak\n            } else if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n                // Ganar el set y preparar para el próximo set\n                if (cSI < quadra.match.score.sets.length - 1) {\n                    cSI += 1;\n                } else {\n                    console.log(\"Fin del partido\");\n                }\n                cG = [0, 0];\n            }\n        }*/\n        // Verificar si hay un ganador del Game\n        if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n            //sumo 1 al set correspondiente y \n             cS[teamIndex]+=1;\n            // Verificar si hay un ganador del set\n            if (cS[0] === 6 && cS[1] === 6) { // Comprobar si se necesita iniciar un tiebreak\n                inTiebreak = true;\n                //cG = [0, 0]; // Reiniciar puntuación para tiebreak\n            }\n            if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n                //if (cSI < cS.length - 1) {\n                if (cSI <= cS.length) {\n                    cSI +=1;\n                    cS = [0 , 0];\n                        console.log(`incremento de indice me muevo al siguiente SET`);\n    \n                }\n            }\n            // Reiniciar el juego actual\n            cG[0] = 0;\n            cG[1] = 0;\n        }\n    }\n    // Actualizar el estado global\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS;\n    quadra.match.score.inTiebreak = inTiebreak;\n    quadra.match.score.gameFormated = inTiebreak ? cG : formatGame(cG); // Formatear juego solo si no está en tiebreak\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////\nfunction formatGame(gameStatus) {\n    let pointsA = JSON.parse(JSON.stringify(gameStatus[0]));\n    let pointsB = JSON.parse(JSON.stringify(gameStatus[1]));\n\n        if (pointsA >= 3 && pointsB >= 3) {  //si los dos son mayores que3\n            console.log(\"pointsA y pointsB mayores que 3\");\n            if (pointsA === pointsB) {\n                console.log(\"pointsA === pointsB retorna 40-40\");\n                return [\"40\",\"40\"];  // Deuce\n            }\n            if (pointsA > pointsB) {\n                console.log(\"pointsA > pointsB retorna AD-40\");\n                return [\"AD\",\"40\"];\n            }\n            if (pointsB > pointsA){\n                console.log(\"pointsA < pointsB retorna 40-AD\");\n                return [\"40\" , \"AD\"];\n            }\n            \n        }\n        else{\n            console.log(\"pointsA & pointsB menor a 3 entonces\");\n            console.log([formatPoint(pointsA) , formatPoint(pointsB)]);\n            return [formatPoint(pointsA) , formatPoint(pointsB)];\n        }\n        function formatPoint (point){\n        return  point === 0 ? \"0\" :\n                point === 1 ? \"15\" :\n                point === 2 ? \"30\" :\n                point === 3 ? \"40\" :\n                \"AD\";    \n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////\n// Obtener el objeto 'quadra' del contexto de flujo\nlet quadra = flow.get('quadra') || {match : newMatch()}\n    /*{match: {\n        matchID: generateUniqueID(),  // Generar un ID único para el partido\n        gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n        score: {\n            sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n            currentSet: 0,  // Índice del set actual en el array de sets\n            currentGame: [0, 0],  // Puntuación del juego actual\n            gameFormated: [0,0]     //Formateo de puntuación del game actual\n        },\n        actionHistory: [],  // Historial de todas las acciones realizadas\n        scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n    } }   */\n\n// Evaluar la acción proveniente del nodo inject\nswitch (msg.payload.action) {\n    case \"A\":\n        // Sumar punto al Equipo A\n        updateScore(0);\n        break;\n    case \"B\":\n        // Sumar punto al Equipo B\n        updateScore(1);\n        break;\n    case \"Undo\":\n    // Deshacer la última acción\n    let aH = quadra.match.actionHistory;\n    let sH = quadra.match.scoreHistory;\n    if (aH.length > 0 && sH.length > 0){\n        quadra.match.actionHistory.pop();   //Delete last action\n        let previousState = quadra.match.scoreHistory.pop();    //Delete last score\n            console.log(\"Undo - Restoring to previous state:\", previousState);\n        // Restaurar el estado completo del partido\n        quadra.match.score = JSON.parse(JSON.stringify(previousState));\n    }\n           // quadra.match.scoreHistory.pop();    //Delete last score\n        break;\n    case \"Reset\":\n        quadra.match = newMatch();\n        // Reiniciar el partido\n        /*quadra.match.score.sets = [[0, 0], [0, 0], [0, 0]];\n        quadra.match.score.currentSet = 0;\n        quadra.match.score.currentGame = [0, 0];\n        quadra.match.score.gameFormated = [0, 0];\n        quadra.match.actionHistory = [];\n        quadra.match.scoreHistory = [];\n        quadra.match.gameTime= 0; // Tiempo transcurrido del partido en segundos o formato deseado\n        */\n        break;\n    default:\n        // Por si se recibe una acción no esperada\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n        break;\n}\n\n// Guardar el estado actualizado\nflow.set('quadra', quadra);\n\n// Pasar el estado actualizado al siguiente nodo (si es necesario)\nreturn {payload: quadra};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1280,"y":60,"wires":[[]]},{"id":"5e28941.ebafb6c","type":"function","z":"993456db.6e41d8","name":"ETL Analitycs","func":"// Nodo de Función ETL en Node-RED para extraer y formatear datos para Google Sheets\n\nif (msg.payload && msg.payload.quadra && msg.payload.quadra.match) {\n    const { matchID, score: { gameFormated, sets, currentSet }, startTime } = msg.payload.quadra.match;\n//    const currentTime = Date.now();\n//    const totalSeconds = Math.floor((currentTime - startTime) / 1000);\n//    const minutes = Math.floor(totalSeconds / 60);\n//    const seconds = totalSeconds % 60;\n//    const gameTime = `${minutes} min ${seconds} sec`;\n    const action = msg.payload.action;\n    const currentTime = Date.now();\n    const totalSeconds = Math.floor((currentTime - startTime) / 1000);\n    const hours = Math.floor(totalSeconds / 3600); // Total horas\n    const minutes = Math.floor((totalSeconds % 3600) / 60); // Resto convertido a minutos\n    const seconds = totalSeconds % 60; // Resto en segundos\n    const gameTime = [\n        hours.toString().padStart(2, '0'),\n        minutes.toString().padStart(2, '0'),\n        seconds.toString().padStart(2, '0')\n    ].join(':');\n    \n    msg.payload = [\n        matchID,\n        action,\n        gameFormated.join(\"-\"),\n        gameFormated[0],\n        gameFormated[1],\n        currentSet,\n        sets[currentSet].join(\"-\"),\n        sets[currentSet][0],\n        sets[currentSet][1],\n        gameTime\n    ];\n    msg.topic = \"GameData for Google Sheets\";\n\n    console.log(\"Data prepared for Google Sheets:\", msg.payload);\n} else {\n    console.error(\"Error: Mensaje no contiene la estructura esperada.\");\n    msg.payload = \"Error: Mensaje no contiene la estructura esperada.\";\n    msg.error = true;\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":460,"y":80,"wires":[["95836f17.249f4","bb9e5999.da6c88"]]},{"id":"bb9e5999.da6c88","type":"GSheet","z":"993456db.6e41d8","creds":"5f68bb21.60d2c4","method":"append","action":"","sheet":"1wcbxfS_hjSR6Pa2BmnsubcCN2gfxF1ZogYVmUgtTzMo","cells":"A2","flatten":false,"name":"ETL sheet","x":620,"y":80,"wires":[["3d241829.40a1f8"]]},{"id":"b151c0ce.f65ec","type":"comment","z":"993456db.6e41d8","name":"","info":"node-red-cbpadel@cbpadel.iam.gserviceaccount.com\n\nkey->\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"cbpadel\",\n  \"private_key_id\": \"bbb9ffeba0be520f2b466af73f122ed2138ea313\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCyhifAxt8EEr/z\\nM+Kvuj/XS6JOhxcJLoJqbcnz+Vs1QdkEza6V/MsizdvAwleDUlDWqfoB1T7GjCjz\\nkN5avl+XL+i37jmT1HVWiZQNomOoOiWkHtBe3WtFxbnGI3sZhyVr2lQtff3TFb39\\nXRgNFPq/U83za/iOa4pLw2uMENE6yVludL+cQlEnWXV/CcEXXFxYuUn9IypGB23R\\n47LuhpKuQD2GgD6wl2D2W9N2lik8ccoB05nHsPSmCGFptHFAwBw2nm7eLMLLs0d9\\nFv+QlgHAHMUI/R78CZihpfYBPcJQA/a/lp8PRZbIgz8ELBvsT17eGN7iVmNVguhc\\nB/EWsgGxAgMBAAECggEAGXqnKs7XXoP0jFff5xesa+RaDl4ebguKxnjT5XO1zkSP\\nHi3i2HpDXbzGu9yg09fIPNL2oRNXycuQPq7y5T2dc/z8+F9SLWSZuJebH1UJZyWh\\nYKqbL6bnXAZrzLkcpRiSQTHgaLu+IcXNH1+NgrR3Ux45WyASUfVMQCLscwmlav+7\\nq83QKiXh3EZyGZ1Ur7nTzFokTVBxzrPoSVd7KYqghnyfPzbY9vGLfE3ioDBFQokM\\nYlOLPN1OXYHecGgR5xhMDtT1fxxxrKoLA0ztGl24CXLfKpmUSqC39zuB8IbxHhBA\\nJvbvT1T3JJt11QNcQL7EYTXlYYUbwS1tjc5icqvizwKBgQDcltSzzb/tSlro5IXB\\nF6fhpWhtaOMKDAaTWY9fdLrDHvkNUgHI4Iit6BMZZDGjNaYOPmfMkQ/N/u5IPDXm\\nCxfFMI97YjB/uNpCqpHu34xouqC+vwedbnKkR9Hz4EhOSmAGkOXGf8XGMA26LjfV\\n2lFbkqlaabrBcBEi/c0sVTksmwKBgQDPLqWP2gDSrYN/6ou1vng2DZF2hQo+7lks\\nw1r6C6dTU6LUFYJa/xPtzvRqztWFCGp29cTmq2Lklol6z4VnsXivgWl3bjFdVOXd\\nKxbE3sbVKUJCGwcDBL4CE/fpjM+xcFt/xS3jrc2q+WmWZNvB0XtgCV83ai89723k\\nUQaG7ToBowKBgQC8+ha1BzJChm3FkWkpGCwB+uOwv6epxs2nVJWocGdDm/g/Oh8/\\nSWSun+Ak45pGuUJOd5YTQb8pehoHFlYSgzRVAZoaWO81rFaHwHsPCsLOQfxODXfn\\nnmRmawTqCh3HvJ3xYhcHbBUyCZ7o/ollEwiaC9Y8F9Ifv/NeZ9JrBYPauwJ/f95K\\nUH48A8sTXd9kWsczaij1njB+Ilj4sKfhfnGy07rKxBqCWacUpbEVKNZ+8ZxAGSuW\\nWsdsQainMSTjMRxXX/p/HTblQLUlKVtushLMpMLSIfqMWVCT9LReTcaaaOjvj+wi\\nZmLejKdig2+8MeMYQi2Glqzye0dKi592Z9AB/QKBgQCiRwptP4CuxJMz6MkE8m6V\\n4fjzfStL+7nbTQyUeLtO/wXVkSbhZocTuW5mfWqeiRb0aVctvtaLDpz9BENIuYUj\\nPxndKCmT47IqWEw/rcnUcsSGeF4L2l/ScaYOOf0nIqo5jNs/cwlhtTCViq+0Kwrr\\nzxY2azUh6pvGnEPcb53mfA==\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"node-red-cbpadel@cbpadel.iam.gserviceaccount.com\",\n  \"client_id\": \"116910036715089491641\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/node-red-cbpadel%40cbpadel.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}","x":540,"y":140,"wires":[]},{"id":"3d241829.40a1f8","type":"debug","z":"993456db.6e41d8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":750,"y":40,"wires":[]},{"id":"8fb7ac7d.3dca5","type":"function","z":"993456db.6e41d8","name":"ETL Dashboard","func":"// Nodo de Función ETL en Node-RED para extraer y formatear datos para Dashboard\n\nif (msg.payload && msg.payload.quadra && msg.payload.quadra.match) {\n    const { matchID, score: { gameFormated, sets, currentSet }, startTime } = msg.payload.quadra.match;\n    const actions = msg.payload.quadra.match.actionHistory;\n    const scores = msg.payload.quadra.match.scoreHistory;\n    const lastHistoryScore = msg.payload.quadra.match.scoreHistory[msg.payload.quadra.match.scoreHistory.length - 2];\n    const currentScore = msg.payload.quadra.match.scoreHistory[msg.payload.quadra.match.scoreHistory.length - 1];\n    const setsFormated = sets.map(set => set.join(\"-\")).join(\" | \");\n\n    /////////time ///////////\n    const currentTime = Date.now();\n    const totalSeconds = Math.floor((currentTime - startTime) / 1000);\n    const hours = Math.floor(totalSeconds / 3600); // Total horas\n    const minutes = Math.floor((totalSeconds % 3600) / 60); // Resto convertido a minutos\n    const seconds = totalSeconds % 60; // Resto en segundos\n    const gameTime = [\n        hours.toString().padStart(2, '0'),\n        minutes.toString().padStart(2, '0'),\n        seconds.toString().padStart(2, '0')\n    ].join(':');\n////////////////////////////////////////////////////////////////////////\n    msg.payload = [\n        //gameFormated [0]\n        gameFormated.join(\"-\"),\n        //actualSet [1]\n        sets[currentSet].join(\"-\"),\n        //setsTotales [2]\n        setsFormated,\n        //último registro historico [3]\n        lastHistoryScore,\n        //registro actual [4]\n        currentScore,\n        //historico acciones [5]\n        actions,\n        //historico scores [6]\n        scores,\n    ];\n    msg.topic = \"Data for dashboard\";\n\n    console.log(\"Data prepared for Dashboard:\", msg.payload);\n} else {\n    console.error(\"Error: Mensaje no contiene la estructura esperada.\");\n    msg.payload = \"Error: Mensaje no contiene la estructura esperada.\";\n    msg.error = true;\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":560,"y":220,"wires":[["27f12061.5242a","7cb91e30.8eac5","b5162512.fb5c68","4626feaa.826a8","9d560ee4.3aa9d","a2ce370a.519358","d2336101.e9f18"]]},{"id":"b5162512.fb5c68","type":"debug","z":"993456db.6e41d8","name":"","active":false,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":750,"y":100,"wires":[]},{"id":"4626feaa.826a8","type":"ui_text","z":"993456db.6e41d8","g":"e1ffd6f4.380a08","group":"bfa50861.979ed8","order":0,"width":"10","height":"2","name":"Sets","label":"Sets","format":"{{msg.payload[2]}}","layout":"col-center","className":"set","style":true,"font":"Tahoma,Geneva,sans-serif","fontSize":"35","color":"#1e00ff","x":930,"y":120,"wires":[]},{"id":"9d560ee4.3aa9d","type":"ui_text","z":"993456db.6e41d8","g":"bb621a1d.5999e8","group":"aaed0f5e.dc6bb","order":0,"width":"0","height":"0","name":"","label":"Current Score","format":"{{msg.payload[4]}}","layout":"col-center","className":"","style":true,"font":"","fontSize":"17","color":"#1e00ff","x":960,"y":220,"wires":[]},{"id":"a2ce370a.519358","type":"ui_text","z":"993456db.6e41d8","g":"bb621a1d.5999e8","group":"aaed0f5e.dc6bb","order":0,"width":"0","height":"0","name":"","label":"Previous Score","format":"{{msg.payload[3]}}","layout":"col-center","className":"","style":true,"font":"","fontSize":"17","color":"#1e00ff","x":960,"y":260,"wires":[]},{"id":"d2336101.e9f18","type":"ui_text","z":"993456db.6e41d8","g":"b8412b29.cdef88","group":"fc86343b.be03e8","order":0,"width":"14","height":"7","name":"ActionHistory","label":"Action History","format":"{{msg.payload[5]}}","layout":"col-center","className":"history_class","style":true,"font":"Verdana,Verdana,Geneva,sans-serif","fontSize":"13","color":"#1e00ff","x":950,"y":360,"wires":[]},{"id":"1f8e04bf.46e6cb","type":"ui_text","z":"993456db.6e41d8","g":"b8412b29.cdef88","group":"fc86343b.be03e8","order":0,"width":"14","height":"7","name":"PointsHistory","label":"Points History","format":"{{msg.payload[6]}}","layout":"col-center","className":"history_class","style":true,"font":"Verdana,Verdana,Geneva,sans-serif","fontSize":"13","color":"#1e00ff","x":950,"y":400,"wires":[]},{"id":"87526071.ebd6","type":"mqtt in","z":"993456db.6e41d8","name":"","topic":"cbpadel/quadra/record","qos":"2","datatype":"auto","broker":"497dab45.319884","x":140,"y":640,"wires":[["f4eaea6a.f0baf8"]]},{"id":"38d92e3f.f59c12","type":"mqtt out","z":"993456db.6e41d8","name":"","topic":"cbpadel/quadra/record","qos":"","retain":"","broker":"497dab45.319884","x":540,"y":520,"wires":[]},{"id":"f8e7f6fc.fd5b48","type":"inject","z":"993456db.6e41d8","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":130,"y":520,"wires":[["6014676e.db4b28"]]},{"id":"6014676e.db4b28","type":"function","z":"993456db.6e41d8","name":"","func":"// Crea el mensaje con los datos hardcodeados\nmsg.payload = {\n    \"action\": \"A\",                  // Valores posibles: \"add_point\", \"undo\", \"reset\"\n    //\"team\": \"A\",                   // Valores posibles: \"A\", \"B\" (solo aplicable para \"add_point\")\n    \"timestamp\": new Date().toISOString(), // ISO 8601 timestamp\n    \"session_id\": \"game12345\",     // Identificador único de la sesión de juego\n    \"battery_level\": 85,           // Nivel de batería en porcentaje\n    \"battery_voltage\": 3.7,        // Tensión de la batería en voltios\n    \"device_mac\": \"AA:BB:CC:DD:EE:FF\" // Identificador único de la MAC address del ESP32\n};\n\n// Devuelve el mensaje\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":300,"y":520,"wires":[["98374f3d.76c57","38d92e3f.f59c12"]]},{"id":"98374f3d.76c57","type":"debug","z":"993456db.6e41d8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":490,"y":480,"wires":[]},{"id":"f4eaea6a.f0baf8","type":"function","z":"993456db.6e41d8","name":"string to jsonObject","func":"\n// Convierte la cadena JSON en un objeto JavaScript\nvar data = JSON.parse(msg.payload);\n\n// Crea un objeto para almacenar las propiedades desarticuladas\nvar separatedData = {};\n\n// Recorre todas las propiedades del objeto\nfor (var key in data) {\n    if (data.hasOwnProperty(key)) {\n        separatedData[key] = data[key];\n    }\n}\n\n// Asigna el objeto separado al payload del mensaje\nmsg.payload = separatedData;\n\n// Devuelve el mensaje con las propiedades separadas\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":390,"y":640,"wires":[["8646b3ba.a3b0e","747daba6.bdfa94","11d73135.325daf","abc5e4d8.a174b8"]]},{"id":"11d73135.325daf","type":"debug","z":"993456db.6e41d8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":930,"y":640,"wires":[]},{"id":"8646b3ba.a3b0e","type":"ui_text_input","z":"993456db.6e41d8","name":"","label":"Esp","tooltip":"","group":"403ac05f.4044","order":8,"width":0,"height":0,"passthru":true,"mode":"text","delay":300,"topic":"topic","sendOnBlur":true,"className":"","topicType":"msg","x":570,"y":560,"wires":[[]]},{"id":"747daba6.bdfa94","type":"ui_text","z":"993456db.6e41d8","group":"403ac05f.4044","order":1,"width":0,"height":0,"name":"","label":"esp","format":"{{msg.payload}}","layout":"row-spread","className":"","style":false,"font":"","fontSize":16,"color":"#000000","x":570,"y":600,"wires":[]},{"id":"b5217417.7227a8","type":"GSheet","z":"993456db.6e41d8","creds":"5f68bb21.60d2c4","method":"append","action":"","sheet":"1EiAxIncQlI0sc_-PZcU0PZVt4XL_5SSt1SqA_NcZtzE","cells":"A2","flatten":false,"name":"ETL sheet","x":780,"y":720,"wires":[["11d73135.325daf"]]},{"id":"abc5e4d8.a174b8","type":"function","z":"993456db.6e41d8","name":"PrepForSheet","func":"// Nodo de Función para preparar datos para Google Sheets\n\n// Verificar que el mensaje contenga un payload\nif (msg.payload) {\n    // Convertir el objeto JSON del payload en un array de valores\n    let values = Object.values(msg.payload); // Esto crea un array de todos los valores del objeto\n\n    // Opcional: Convertir todos los valores a string si es necesario\n    values = values.map(value => typeof value === 'string' ? value : String(value));\n\n    // Establecer el payload para Google Sheets\n    msg.payload = [values]; // Google Sheets espera un array de filas, cada fila es un array de celdas\n\n    // Opcional: Ajustar el tópico si es necesario\n    msg.topic = \"Insert Row in Google Sheets\";\n} else {\n    // Manejar el caso donde no hay un payload válido\n    console.error(\"Error: Mensaje no contiene un payload válido.\");\n    msg.payload = \"Error: Mensaje no contiene un payload válido.\";\n    msg.error = true;\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":600,"y":720,"wires":[["b5217417.7227a8"]]},{"id":"7b164d8f.fa2774","type":"inject","z":"6bb5342f.84ad1c","g":"3102bca2.1ad974","name":"Reset","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"reset","payload":"{\"action\": \"Reset\"}","payloadType":"json","x":470,"y":300,"wires":[["e8ef020d.5c655"]]},{"id":"a24723d1.05a8b","type":"inject","z":"6bb5342f.84ad1c","g":"3102bca2.1ad974","name":"A","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"teamA","payload":"{\"action\": \"A\"}","payloadType":"json","x":470,"y":340,"wires":[["8ff62ede.f500c"]]},{"id":"f747785c.35ad88","type":"inject","z":"6bb5342f.84ad1c","g":"3102bca2.1ad974","name":"B","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"teamB","payload":"{\"action\": \"B\"}","payloadType":"json","x":470,"y":380,"wires":[["9cfd705.a237b9"]]},{"id":"d0d41f0b.d8085","type":"inject","z":"6bb5342f.84ad1c","g":"3102bca2.1ad974","name":"Undo","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"undo","payload":"{\"action\": \"Undo\"}","payloadType":"json","x":470,"y":420,"wires":[["ac9c0231.3c209"]]},{"id":"5331f574.144c6c","type":"mqtt in","z":"6bb5342f.84ad1c","name":"","topic":"cbpadel/quadra2/+","qos":"2","datatype":"auto","broker":"497dab45.319884","x":470,"y":500,"wires":[["12c3d109.18dddf"]]},{"id":"8ff62ede.f500c","type":"mqtt out","z":"6bb5342f.84ad1c","name":"","topic":"cbpadel/quadra2/point_a","qos":"2","retain":"","broker":"497dab45.319884","x":750,"y":340,"wires":[]},{"id":"9cfd705.a237b9","type":"mqtt out","z":"6bb5342f.84ad1c","name":"","topic":"cbpadel/quadra2/point_b","qos":"2","retain":"","broker":"497dab45.319884","x":750,"y":380,"wires":[]},{"id":"ac9c0231.3c209","type":"mqtt out","z":"6bb5342f.84ad1c","name":"","topic":"cbpadel/quadra2/undo","qos":"2","retain":"","broker":"497dab45.319884","x":740,"y":420,"wires":[]},{"id":"e8ef020d.5c655","type":"mqtt out","z":"6bb5342f.84ad1c","name":"","topic":"cbpadel/quadra2/reset","qos":"2","retain":"","broker":"497dab45.319884","x":740,"y":300,"wires":[]},{"id":"12c3d109.18dddf","type":"debug","z":"6bb5342f.84ad1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":710,"y":500,"wires":[]},{"id":"52bc1dc6.060cc4","type":"inject","z":"f6f2187d.f17ca8","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":170,"y":120,"wires":[["c98acecb.7f0ab"]]},{"id":"c98acecb.7f0ab","type":"exec","z":"f6f2187d.f17ca8","command":"show_advertising.py https://assets-global.website-files.com/651b0300b672926c0397ab14/651b0300b672926c0397ab75_driviotfullcolorhorizontal-p-500.png","addpay":true,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"","x":800,"y":120,"wires":[[],[],[]]},{"id":"4809050d.196f2c","type":"exec","z":"f6f2187d.f17ca8","command":"","addpay":true,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"","x":330,"y":220,"wires":[[],[],[]]},{"id":"4dc97a07.3a1d34","type":"inject","z":"f6f2187d.f17ca8","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":180,"y":220,"wires":[["4809050d.196f2c"]]},{"id":"b113ad7c.43e3","type":"mqtt in","z":"993456db.6e41d8","name":"","topic":"cbpadel/quadra/+","qos":"2","datatype":"auto","broker":"497dab45.319884","x":120,"y":340,"wires":[["9ae2ad0b.e39f8"]]},{"id":"5e87d27b.2dd5cc","type":"debug","z":"993456db.6e41d8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":450,"y":340,"wires":[]},{"id":"9ae2ad0b.e39f8","type":"json","z":"993456db.6e41d8","name":"","property":"payload","action":"","pretty":false,"x":290,"y":340,"wires":[["5c8c51a1.c2016","5e87d27b.2dd5cc"]]}]