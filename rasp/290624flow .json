[{"id":"993456db.6e41d8","type":"tab","label":"Flow 3","disabled":false,"info":""},{"id":"435d4ab3.5afc44","type":"inject","z":"993456db.6e41d8","name":"B","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"teamB","payload":"{\"action\": \"B\"}","payloadType":"json","x":90,"y":320,"wires":[["24f584ef.1f069c","5c8c51a1.c2016"]]},{"id":"108919a2.d39446","type":"inject","z":"993456db.6e41d8","name":"Undo","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"undo","payload":"{\"action\": \"Undo\"}","payloadType":"json","x":90,"y":360,"wires":[["24f584ef.1f069c","5c8c51a1.c2016"]]},{"id":"24f584ef.1f069c","type":"debug","z":"993456db.6e41d8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":310,"y":180,"wires":[]},{"id":"8e1b9975.402078","type":"inject","z":"993456db.6e41d8","name":"Reset","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"reset","payload":"{\"action\": \"Reset\"}","payloadType":"json","x":90,"y":240,"wires":[["24f584ef.1f069c","5c8c51a1.c2016"]]},{"id":"90c5e874.c67b88","type":"inject","z":"993456db.6e41d8","name":"A","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"teamA","payload":"{\"action\": \"A\"}","payloadType":"json","x":90,"y":280,"wires":[["24f584ef.1f069c","5c8c51a1.c2016"]]},{"id":"95836f17.249f4","type":"debug","z":"993456db.6e41d8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":770,"y":160,"wires":[]},{"id":"fd5eded.af67f2","type":"debug","z":"993456db.6e41d8","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":540,"y":140,"wires":[]},{"id":"5c8c51a1.c2016","type":"function","z":"993456db.6e41d8","name":"Actions Logic","func":"function generateUniqueID() {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2);\n}\n//////////////////////////////////////////////////////////////////////\nfunction newMatch(){\n        return {\n            matchID: generateUniqueID(),  // Generar un ID único para el partido\n            gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n            score: {\n                sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n                currentSet: 0,                  // Índice del set actual en el array de sets\n                currentGame: [0, 0],            // Puntuación del juego actual\n                gameFormated: [0,0],            //Formateo de puntuación del game actual\n                inTiebreak: false               // Flag para indicar si el juego actual es un tiebreak\n            },\n            actionHistory: [],  // Historial de todas las acciones realizadas\n            scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n        }    \n        \n}\n//////////////////////////////////////////////////////////////////////\nfunction updateScore(teamIndex) {\n    console.log(`------------------updating`);\n /*//asigno valores globales a variables locales para facilitar la manipulación dentro de los condicionales, cuando tengo que cambiar valores utilizo la notación completa de la variable global\n    let cG = quadra.match.score.currentGame;    //currentGame\n    let cSI = quadra.match.score.currentSet;    //currenSetIndex\n    let cS = quadra.match.score.sets[cSI];      //currenSet\n    let pS = JSON.parse(JSON.stringify(quadra.match.score)); // Hacer una copia profunda antes de modificar//previousScore\n   \n    //console.log( \"----->cs: \",cS, \" cSI:\" , cSI, \" pScore:\", pS);\n    \n    //Registro en los historiales\n    quadra.match.actionHistory.push({action:teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(pS);\n    // Incrementar el punto para el equipo especificado y al final de la función actualizo valores globales\n    cG[teamIndex] += 1;\n\n    // Verificar si hay un ganador del Game\n    if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n        //sumo 1 al set correspondiente y \n         cS[teamIndex]+=1;\n        // Verificar si hay un ganador del set\n        if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n            //if (cSI < cS.length - 1) {\n            if (cSI < cS.length) {\n                cSI +=1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice`);\n\n            } else {\n                  // me muevo al otro set o si ya estaba en el tercer set GANADOR DEL PARTIDO en otra función\n              console.log(`+++++++++++++++++++FindePartido+++++++++++++++++++++`);\n            }\n        }\n        // Reiniciar el juego actual\n        cG[0] = 0;\n        cG[1] = 0;\n    }\n    let cfG =JSON.parse(JSON.stringify(formatGame(cG)));\n    //console.log(\"-----__>currentGame\", cG);\n    //console.log(\"-----__> game FOrmated -> \", cfG);\n    //console.log(\"game FOrmated -> \", formatGame(cG));\n    //console.log(\"game FOrmated -> \", formatGame(cG[0]), \" \", formatGame(cG[1]));\n\n    // Actualizo valores globales\n    quadra.match.score.gameFormated =[cfG];     //Escribo el valor del game formateado en su campo del score\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS ; */\n    ///--------------------------------/////---------////\n    \n\n    let cG = quadra.match.score.currentGame;\n    let cSI = quadra.match.score.currentSet;\n    let cS = quadra.match.score.sets[cSI];\n    let inTiebreak = quadra.match.score.inTiebreak;\n\n    quadra.match.actionHistory.push({action: teamIndex === 0 ? \"pointA\" : \"pointB\"});\n    quadra.match.scoreHistory.push(JSON.parse(JSON.stringify(quadra.match.score))); \n\n    cG[teamIndex] += 1;\n        console.log( \"----->cs:\",cS, \" cSI:\" , cSI, \" cGame:\", cG);\n\n    if (inTiebreak) {\n        console.log( \"---Estoy en Tiebreak--> \");\n        // Manejar puntuación en tiebreak: simplemente incrementar puntos\n        if ((cG[0] >= 7 || cG[1] >= 7) && Math.abs(cG[0] - cG[1]) >= 2) { // Condición para ganar el tiebreak\n                console.log(\"Condición ganador tiebreak \")\n            cS[teamIndex] += 1;\n            if (cSI <= cS.length) {\n                cSI +=1;\n                cS = [0 , 0];\n                    console.log(`incremento de indice me muevo al siguiente SET`);\n    \n                }\n            cG = [0, 0]; // Reiniciar juego\n            inTiebreak = false; // Salir del modo tiebreak\n                console.log( \"---Finalizó Tiebreak--> \", \"ganó el set el team : \",teamIndex);\n        }\n    } else {\n        /*if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n            cS[teamIndex] += 1;\n            if (cS[0] === 6 && cS[1] === 6) { // Comprobar si se necesita iniciar un tiebreak\n                inTiebreak = true;\n                cG = [0, 0]; // Reiniciar puntuación para tiebreak\n            } else if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n                // Ganar el set y preparar para el próximo set\n                if (cSI < quadra.match.score.sets.length - 1) {\n                    cSI += 1;\n                } else {\n                    console.log(\"Fin del partido\");\n                }\n                cG = [0, 0];\n            }\n        }*/\n        // Verificar si hay un ganador del Game\n        if ((cG[0] >= 4 || cG[1] >= 4) && Math.abs(cG[0] - cG[1]) >= 2) {\n            //sumo 1 al set correspondiente y \n             cS[teamIndex]+=1;\n            // Verificar si hay un ganador del set\n            if (cS[0] === 6 && cS[1] === 6) { // Comprobar si se necesita iniciar un tiebreak\n                inTiebreak = true;\n                //cG = [0, 0]; // Reiniciar puntuación para tiebreak\n            }\n            if (cS[teamIndex] >= 6 && Math.abs(cS[0] - cS[1]) >= 2) {\n                //if (cSI < cS.length - 1) {\n                if (cSI <= cS.length) {\n                    cSI +=1;\n                    cS = [0 , 0];\n                        console.log(`incremento de indice me muevo al siguiente SET`);\n    \n                }\n            }\n            // Reiniciar el juego actual\n            cG[0] = 0;\n            cG[1] = 0;\n        }\n    }\n    // Actualizar el estado global\n    quadra.match.score.currentGame = cG;\n    quadra.match.score.currentSet = cSI;\n    quadra.match.score.sets[cSI] = cS;\n    quadra.match.score.inTiebreak = inTiebreak;\n    quadra.match.score.gameFormated = inTiebreak ? cG : formatGame(cG); // Formatear juego solo si no está en tiebreak\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////\nfunction formatGame(gameStatus) {\n    let pointsA = JSON.parse(JSON.stringify(gameStatus[0]));\n    let pointsB = JSON.parse(JSON.stringify(gameStatus[1]));\n\n        if (pointsA >= 3 && pointsB >= 3) {  //si los dos son mayores que3\n            console.log(\"pointsA y pointsB mayores que 3\");\n            if (pointsA === pointsB) {\n                console.log(\"pointsA === pointsB retorna 40-40\");\n                return [\"40\",\"40\"];  // Deuce\n            }\n            if (pointsA > pointsB) {\n                console.log(\"pointsA > pointsB retorna AD-40\");\n                return [\"AD\",\"40\"];\n            }\n            if (pointsB > pointsA){\n                console.log(\"pointsA < pointsB retorna 40-AD\");\n                return [\"40\" , \"AD\"];\n            }\n            \n        }\n        else{\n            console.log(\"pointsA & pointsB menor a 3 entonces\");\n            console.log([formatPoint(pointsA) , formatPoint(pointsB)]);\n            return [formatPoint(pointsA) , formatPoint(pointsB)];\n        }\n        function formatPoint (point){\n        return  point === 0 ? \"0\" :\n                point === 1 ? \"15\" :\n                point === 2 ? \"30\" :\n                point === 3 ? \"40\" :\n                \"AD\";    \n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////\n// Obtener el objeto 'quadra' del contexto de flujo\nlet quadra = flow.get('quadra') || {match : newMatch()}\n    /*{match: {\n        matchID: generateUniqueID(),  // Generar un ID único para el partido\n        gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n        score: {\n            sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n            currentSet: 0,  // Índice del set actual en el array de sets\n            currentGame: [0, 0],  // Puntuación del juego actual\n            gameFormated: [0,0]     //Formateo de puntuación del game actual\n        },\n        actionHistory: [],  // Historial de todas las acciones realizadas\n        scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n    } }   */\n\n// Evaluar la acción proveniente del nodo inject\nswitch (msg.payload.action) {\n    case \"A\":\n        // Sumar punto al Equipo A\n        updateScore(0);\n        break;\n    case \"B\":\n        // Sumar punto al Equipo B\n        updateScore(1);\n        break;\n    case \"Undo\":\n    // Deshacer la última acción\n    let aH = quadra.match.actionHistory;\n    let sH = quadra.match.scoreHistory;\n    if (aH.length > 0 && sH.length > 0){\n        quadra.match.actionHistory.pop();   //Delete last action\n        let previousState = quadra.match.scoreHistory.pop();    //Delete last score\n            console.log(\"Undo - Restoring to previous state:\", previousState);\n        // Restaurar el estado completo del partido\n        quadra.match.score = JSON.parse(JSON.stringify(previousState));\n    }\n           // quadra.match.scoreHistory.pop();    //Delete last score\n        break;\n    case \"Reset\":\n        quadra.match = newMatch();\n        // Reiniciar el partido\n        /*quadra.match.score.sets = [[0, 0], [0, 0], [0, 0]];\n        quadra.match.score.currentSet = 0;\n        quadra.match.score.currentGame = [0, 0];\n        quadra.match.score.gameFormated = [0, 0];\n        quadra.match.actionHistory = [];\n        quadra.match.scoreHistory = [];\n        quadra.match.gameTime= 0; // Tiempo transcurrido del partido en segundos o formato deseado\n        */\n        break;\n    default:\n        // Por si se recibe una acción no esperada\n        node.warn(\"Acción no reconocida: \" + msg.payload.action);\n        break;\n}\n\n// Guardar el estado actualizado\nflow.set('quadra', quadra);\n\n// Pasar el estado actualizado al siguiente nodo (si es necesario)\nreturn {payload: quadra};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":350,"y":300,"wires":[["fd5eded.af67f2","c5623da9.20eb9","f2f07d47.361fb","e0ad96ec.007e38"]]},{"id":"65aa1597.0a17dc","type":"function","z":"993456db.6e41d8","name":"set 0","func":"let quadra = {\n    match: {\n        matchID: \"\",  // Generar un ID único para el partido\n        gameTime: 0,  // Tiempo transcurrido del partido en segundos o formato deseado\n        score: {\n            sets: [[0, 0], [0, 0], [0, 0]],  // Array para almacenar los juegos ganados en cada set\n            currentSet: 0,  // Índice del set actual en el array de sets\n            currentGame: [0, 0],  // Puntuación del juego actual\n            gameFormated: [0,0]     //Formateo de puntuación del game actual\n            \n        },\n        actionHistory: [],  // Historial de todas las acciones realizadas\n        scoreHistory: []  // Historial de los cambios de puntuación para poder deshacer cambios\n    }    \n};\nflow.set('quadra', quadra);\nreturn {payload: quadra};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":330,"y":40,"wires":[[]]},{"id":"1039a8e6.633857","type":"inject","z":"993456db.6e41d8","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":120,"y":40,"wires":[["65aa1597.0a17dc"]]},{"id":"c5623da9.20eb9","type":"ui_text","z":"993456db.6e41d8","group":"aaed0f5e.dc6bb","order":0,"width":"6","height":"2","name":"","label":"DEBUG","format":"{{msg.payload.match.score}}","layout":"col-center","className":"","style":true,"font":"","fontSize":"17","color":"#1e00ff","x":620,"y":260,"wires":[]},{"id":"f2f07d47.361fb","type":"ui_text","z":"993456db.6e41d8","group":"aaed0f5e.dc6bb","order":0,"width":"6","height":"2","name":"","label":"Previous Score","format":"{{msg.payload.match.scoreHistory[msg.payload.match.scoreHistory.length - 1]}}","layout":"col-center","className":"","style":true,"font":"","fontSize":"17","color":"#1e00ff","x":640,"y":300,"wires":[]},{"id":"e0ad96ec.007e38","type":"ui_text","z":"993456db.6e41d8","group":"bfa50861.979ed8","order":0,"width":"6","height":"10","name":"","label":"Poitns History","format":"{{msg.payload.match.actionHistory}}","layout":"col-center","className":"","style":true,"font":"","fontSize":"13","color":"#1e00ff","x":640,"y":340,"wires":[]},{"id":"aaed0f5e.dc6bb","type":"ui_group","name":"Debug","tab":"60bf50f8.caf5b","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"bfa50861.979ed8","type":"ui_group","name":"pointsHistory","tab":"5054cf9e.d52d3","order":1,"disp":true,"width":"10","collapse":false,"className":""},{"id":"60bf50f8.caf5b","type":"ui_tab","name":"Debug","icon":"dashboard","disabled":false,"hidden":false},{"id":"5054cf9e.d52d3","type":"ui_tab","name":"trash","icon":"dashboard","disabled":true,"hidden":false}]
